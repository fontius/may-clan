This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  globals.css
  layout.tsx
  page.tsx
components/
  Contact.tsx
  Gallery.tsx
  Header.tsx
  SubmitBtn.tsx
context/
  active-section-context.tsx
lib/
  data.ts
  hooks.ts
  types.ts
  validations.ts
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/SubmitBtn.tsx">
// File: components/SubmitBtn.tsx
"use client"; // Uses useFormStatus hook

import React from "react";
import { FaPaperPlane } from "react-icons/fa"; // An icon for the button
import { useFormStatus } from "react-dom"; // Hook to get form submission status

export default function SubmitBtn() {
  // --- Data Flow: Consuming Form Status ---
  // 1. `useFormStatus()` is a hook specifically designed to be used inside a <form>.
  //    It provides information about the status of the parent form, most notably `pending`.
  // 2. `pending` is a boolean:
  //    - `true` when the form is currently submitting.
  //    - `false` otherwise.
  const { pending } = useFormStatus();

  return (
    <button
      type="submit"
      // --- Data Flow: Conditional Styling & Content ---
      // 3. The button's appearance and content change based on the `pending` state:
      //    - `disabled={pending}`: The button is disabled during submission to prevent multiple submits.
      //    - Styling classes for normal, hover, active, and disabled states are applied.
      //    - If `pending` is true, a loading spinner is shown.
      //    - If `pending` is false, the "Submit" text and a paper plane icon are shown.
      className="group flex items-center justify-center gap-2 h-[3rem] w-[8rem] bg-gray-900 text-white rounded-full outline-none transition-all focus:scale-110 hover:scale-110 hover:bg-gray-950 active:scale-105 dark:bg-white dark:bg-opacity-10 disabled:scale-100 disabled:bg-opacity-65"
      disabled={pending}
    >
      {pending ? (
        <div className="h-5 w-5 animate-spin rounded-full border-b-2 border-white"></div>
      ) : (
        <>
          Submit{" "}
          <FaPaperPlane className="text-xs opacity-70 transition-all group-hover:translate-x-1 group-hover:-translate-y-1" />{" "}
        </>
      )}
    </button>
  );
}
</file>

<file path="context/active-section-context.tsx">
// File: context/active-section-context.tsx
"use client";

import type { SectionName } from "@/lib/types";
import React, { useState, createContext, useContext } from "react";

type ActiveSectionContextProviderProps = {
  children: React.ReactNode;
};

type ActiveSectionContextType = {
  activeSection: SectionName;
  setActiveSection: React.Dispatch<React.SetStateAction<SectionName>>;
  timeOfLastClick: number;
  setTimeOfLastClick: React.Dispatch<React.SetStateAction<number>>;
};

export const ActiveSectionContext =
  createContext<ActiveSectionContextType | null>(null);

export default function ActiveSectionContextProvider({
  children,
}: ActiveSectionContextProviderProps) {
  const [activeSection, setActiveSection] = useState<SectionName>("Home"); // Default to "Home" or your first section
  const [timeOfLastClick, setTimeOfLastClick] = useState(0); // To differentiate between scroll and click activation

  return (
    <ActiveSectionContext.Provider
      value={{
        activeSection,
        setActiveSection,
        timeOfLastClick,
        setTimeOfLastClick,
      }}
    >
      {children}
    </ActiveSectionContext.Provider>
  );
}

export function useActiveSectionContext() {
  const context = useContext(ActiveSectionContext);

  if (context === null) {
    throw new Error(
      "useActiveSectionContext must be used within an ActiveSectionContextProvider"
    );
  }

  return context;
}
</file>

<file path="lib/hooks.ts">
// File: lib/hooks.ts
"use client"; // This hook is used in client components

import { useActiveSectionContext } from "@/context/active-section-context";
import { useEffect } from "react";
import { useInView } from "react-intersection-observer";
import type { SectionName } from "./types";

// This hook encapsulates the logic for observing when a section comes into view
// and updating the global active section state.
export function useSectionInView(sectionName: SectionName, threshold = 0.75) {
  // 'ref' is assigned to the DOM element of the section we want to observe.
  // 'inView' is a boolean that becomes true when the observed element
  // is within the viewport according to the specified threshold.
  const { ref, inView } = useInView({
    threshold, // How much of the section needs to be visible (0.0 to 1.0)
                // 0.75 means 75% of the section must be visible.
  });

  // Accessing setActiveSection and timeOfLastClick from our global context.
  // setActiveSection will update which link is highlighted in the header.
  // timeOfLastClick helps prevent the observer from overriding a manual click
  // on a navigation link too quickly.
  const { setActiveSection, timeOfLastClick } = useActiveSectionContext();

  useEffect(() => {
    // This effect runs when 'inView' status changes or other dependencies change.
    // If the section is in view AND enough time has passed since the last
    // manual navigation click (to avoid race conditions where scroll triggers
    // immediately after a click), then we set this section as active.
    if (inView && Date.now() - timeOfLastClick > 1000) { // 1-second delay
      setActiveSection(sectionName);
    }
  }, [inView, setActiveSection, timeOfLastClick, sectionName]); // Dependencies for the effect

  // The hook returns the 'ref' so it can be attached to the section element
  // in the component that uses this hook.
  return {
    ref,
  };
}
</file>

<file path="lib/validations.ts">
import { z } from "zod";

export const validationSchema = z.object({
  email: z.string().email("Invalid email address"),
  message: z.string().min(10, "Message must be at least 10 characters"),
});
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="components/Gallery.tsx">
// File: components/Gallery.tsx
import { useEffect, useRef } from "react";

// Define a more specific type for the gallery widget instance
interface GalleryWidgetInstance {
  render: () => void;
  destroy?: () => void; // Make destroy optional as it's a common cleanup method, but not guaranteed
  // If you discover other methods or properties used by the widget,
  // you can add them here for better type safety.
  // Using 'unknown' for other potential properties is safer than 'any'.
  [key: string]: unknown;
}

declare global {
  interface Window {
    cloudinary?: {
      // Update the return type of galleryWidget to use our defined interface
      galleryWidget: (options: Record<string, unknown>) => GalleryWidgetInstance;
    };
  }
}

function Gallery() {
  const containerRef = useRef<HTMLDivElement | null>(null);
  // Use the more specific type for the ref, allowing it to be null initially
  const widgetInstanceRef = useRef<GalleryWidgetInstance | null>(null);

  useEffect(() => {
    const galleryDiv = containerRef.current;

    if (!galleryDiv) {
      console.warn("Gallery container div not yet available.");
      return;
    }

    let intervalId: NodeJS.Timeout | null = null;

    const initGallery = () => {
      // Check if the Cloudinary script and galleryWidget function are available
      if (window.cloudinary && typeof window.cloudinary.galleryWidget === 'function') {
        console.log("Cloudinary script loaded. Initializing gallery widget.");
        
        // Clean up previous widget instance if it exists and has a destroy method
        if (widgetInstanceRef.current && typeof widgetInstanceRef.current.destroy === 'function') {
          try {
            widgetInstanceRef.current.destroy(); 
            console.log("Previous gallery widget instance destroyed.");
          } catch (e) {
            console.warn("Error destroying previous widget instance:", e);
          }
        }
        // Ensure the container is empty before rendering a new widget
        while (galleryDiv.firstChild) {
          galleryDiv.removeChild(galleryDiv.firstChild);
        }

        const widget = window.cloudinary.galleryWidget({
          container: galleryDiv,
          cloudName: "dsmgnh5rj", // IMPORTANT: Replace with your actual Cloudinary cloud name
          aspectRatio: "16:9",
          zoom: false,
          bgColor: "#F9FAFB",
          themeProps: {
            primary: "#000000",
            onPrimary: "#FFFFFF",
          },
          mediaAssets: [
            {
              tag: "deals", // IMPORTANT: Ensure 'deals' tag exists in your Cloudinary library and has assets
              transformation: {
                crop: "fill",
              },
            },
            {
              tag: "web-video", // IMPORTANT: Ensure 'web-video' tag exists and has video assets
              mediaType: "video",
            },
          ],
          carouselStyle: "thumbnails",
          carouselLocation: "left",
          viewportBreakpoints: [
            { breakpoint: 768, carouselStyle: "thumbnails", carouselLocation: "bottom" },
            { breakpoint: 480, carouselStyle: "indicators", carouselLocation: "bottom", navigation: "always" },
          ],
          // loading: { // The file /images/makeup-loader.svg was not found in your project structure.
          //   style: "custom", // If you have this SVG, place it in `public/images/makeup-loader.svg` and uncomment.
          //   url: "/images/makeup-loader.svg", 
          // },
        });
        
        widget.render();
        widgetInstanceRef.current = widget; // Store the new widget instance

        if (intervalId) {
          clearInterval(intervalId);
          intervalId = null;
        }
        return true; // Initialization successful
      }
      return false; // Cloudinary not ready
    };

    if (!initGallery()) {
      console.log("Cloudinary script not ready, starting poll mechanism...");
      intervalId = setInterval(() => {
        if (initGallery()) {
          console.log("Cloudinary script became available via polling. Widget initialized.");
        }
      }, 500); // Poll every 500ms
    }

    // Cleanup function for when the component unmounts
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
      if (widgetInstanceRef.current && typeof widgetInstanceRef.current.destroy === 'function') {
        console.log("Destroying Cloudinary gallery widget instance on unmount.");
        try {
          widgetInstanceRef.current.destroy();
        } catch (e) {
            console.warn("Error destroying widget instance on unmount:", e);
        }
      }
      widgetInstanceRef.current = null;
    };
  }, []); // Empty dependency array

  return <div ref={containerRef} style={{ width: "100%", minHeight: "400px" }} />;
}

export default Gallery;
</file>

<file path="components/Header.tsx">
// File: components/Header.tsx
"use client"; // This is a client component because it uses hooks and interactivity

import React from "react";
import { motion } from "framer-motion"; // For animations
import { links } from "@/lib/data"; // Your navigation links data
import Link from "next/link"; // For client-side navigation
import clsx from "clsx"; // For conditional class names
import { useActiveSectionContext } from "@/context/active-section-context"; // To get/set active section

export default function Header() {
  // --- Data Flow: Consuming Context ---
  // 1. `useActiveSectionContext` hook is called.
  // 2. It retrieves `activeSection`, `setActiveSection`, and `setTimeOfLastClick`
  //    from the `ActiveSectionContext` that wraps our application in `layout.tsx`.
  //
  // - `activeSection`: A string (SectionName type) representing the currently active section (e.g., "Home", "Services").
  //    This is used to determine which link in the header should be highlighted.
  // - `setActiveSection`: A function to update the `activeSection` state in the context.
  //    This is called when a user clicks on a navigation link.
  // - `setTimeOfLastClick`: A function to record the timestamp of the last link click.
  //    This helps the `useSectionInView` hook to not immediately override a manual click
  //    with a scroll-triggered active section change.
  const { activeSection, setActiveSection, setTimeOfLastClick } =
    useActiveSectionContext();

  return (
    // The header container, fixed at the top, centered.
    <header className="z-[999] relative">
      <motion.div
        // Background of the header, with a subtle animation on load.
        className="fixed top-0 left-1/2 h-[4.5rem] w-full rounded-none border border-black/10 dark:border-white/10 bg-white bg-opacity-80 shadow-lg shadow-black/[0.03] backdrop-blur-[0.5rem] sm:top-6 sm:h-[3.25rem] sm:w-[36rem] sm:rounded-full dark:bg-gray-950 dark:bg-opacity-75"
        // Animation properties from framer-motion
        initial={{ y: -100, x: "-50%", opacity: 0 }} // Starts off-screen and transparent
        animate={{ y: 0, x: "-50%", opacity: 1 }}   // Animates into place
      ></motion.div>

      <nav className="flex fixed top-[0.15rem] left-1/2 h-12 -translate-x-1/2 py-2 sm:top-[1.7rem] sm:h-[initial] sm:py-0">
        <ul className="flex w-[22rem] flex-wrap items-center justify-center gap-y-1 text-[0.9rem] font-medium text-gray-500 sm:w-[initial] sm:flex-nowrap sm:gap-5">
          {/* --- Data Flow: Rendering Links ---
              3. The `links` array (from `lib/data.ts`) is mapped over to create a list item (`<li>`)
                 and a Next.js `<Link>` component for each navigation item.
          */}
          {links.map((link) => (
            <motion.li
              className="h-3/4 flex items-center justify-center relative"
              key={link.hash} // Unique key for each list item
              initial={{ y: -100, opacity: 0 }} // Initial animation state for each link
              animate={{ y: 0, opacity: 1 }}     // Animate links into view
            >
              <Link
                className={clsx(
                  // Base styles for all links
                  "flex w-full items-center justify-center px-3 py-3 hover:text-gray-950 transition dark:text-gray-500 dark:hover:text-gray-300",
                  {
                    // --- Data Flow: Conditional Styling ---
                    // 4. `clsx` conditionally applies "text-gray-950 dark:text-gray-200"
                    //    IF `link.name` (e.g., "Services") matches the `activeSection`
                    //    state from the context. This highlights the active link.
                    "text-gray-950 dark:text-gray-200":
                      activeSection.toLowerCase() === link.name.toLowerCase(),
                  }
                )}
                href={link.hash} // The URL fragment (e.g., "#services")
                onClick={() => {
                  // --- Data Flow: Updating Context on Click ---
                  // 5. When a link is clicked:
                  //    a. `setActiveSection(link.name)` is called. This updates the
                  //       `activeSection` state in the `ActiveSectionContext`. The re-render
                  //       caused by this state change will then re-evaluate step 4,
                  //       highlighting the newly clicked link.
                  //    b. `setTimeOfLastClick(Date.now())` is called. This records the
                  //       current time, signaling to `useSectionInView` that a manual
                  //       click just occurred.
                  setActiveSection(link.name);
                  setTimeOfLastClick(Date.now());
                }}
              >
                {link.name} {/* The display text of the link (e.g., "Services") */}

                {/* --- Data Flow: Active Link Indicator ---
                    6. If this `link.name` is the `activeSection`:
                       An animated `motion.span` is rendered. This span acts as the
                       visual background/underline indicator for the active link.
                       `layoutId="activeSection"` allows framer-motion to smoothly
                       animate this span from one link to another when `activeSection` changes.
                */}
                {link.name === activeSection && (
                  <motion.span
                    className="bg-gray-100 rounded-full absolute inset-0 -z-10 dark:bg-gray-800"
                    layoutId="activeSection" // Crucial for shared layout animation
                    transition={{
                      type: "spring",
                      stiffness: 380,
                      damping: 30,
                    }}
                  ></motion.span>
                )}
              </Link>
            </motion.li>
          ))}
        </ul>
      </nav>
    </header>
  );
}
</file>

<file path="public/next.svg">
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 24.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 394 80" style="enable-background:new 0 0 394 80;" xml:space="preserve">
<style type="text/css">
	.st0{font-family:'MyriadPro-Regular';}
	.st1{font-size:49.1415px;}
	.st2{font-size:20.6415px;}
</style>
<text transform="matrix(1 0 0 1 53.002 46)" class="st0 st1">GREYMATTER</text>
<text transform="matrix(1 0 0 1 127 69)" class="st0 st2">FIRE &amp; SECURITY</text>
</svg>
</file>

<file path="README.md">
# May-Clan Shipping & Logistics Website

Next.js website for May-Clan's shipping and logistics services between Canada and Nigeria.

## Key Features
- Modern responsive design with Inter font
- Optimized for SEO with custom metadata
- Contact form integration
- Dark/light mode support
- Coming soon: Cloudinary gallery for showcasing deals and promotions

## Technologies Used
- Next.js 14
- Tailwind CSS
- Formspree for contact forms
- Framer Motion for animations


## SEO Configuration
- Custom metadata in `app/layout.tsx`
- OpenGraph and Twitter card support
- Semantic HTML structure

## Future Updates
- Cloudinary integration for deals gallery
- Enhanced shipment tracking section
- Multilingual support (English/French)

## Deployment
The site is configured for Vercel deployment with optimized:
- Image loading
- Font loading
- Route prefetching

For questions, contact: tech@may-clan.com

## Setup
1. Install dependencies:
```bash
npm install
```

2. Run development server:
```bash
npm run dev
```

3. Open [http://localhost:3000](http://localhost:3000) in your browser
</file>

<file path="components/Contact.tsx">
// File: components/Contact.tsx
"use client";

import React, { useState } from "react";
import { motion } from "framer-motion";
import { useSectionInView } from "@/lib/hooks";
import { Formik, Form, Field, ErrorMessage } from "formik";
import { toFormikValidationSchema } from "zod-formik-adapter";
import { validationSchema } from "@/lib/validations";
import { ToastContainer, toast } from "react-toastify";

type FormValues = {
  email: string;
  message: string;
};

export default function Contact() {
  const { ref } = useSectionInView("Contact");
  const [isLoading, setIsLoading] = useState(false);
  const formspreeEndpoint = "mayclan-contact"; // TODO: Replace with actual May-Clan Formspree endpoint

  const handleSubmit = async (values: FormValues, { resetForm }: { resetForm: () => void }) => {
    try {
      setIsLoading(true);
      await fetch(`https://formspree.io/f/${formspreeEndpoint}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      });

      resetForm();
      toast.success("Message sent successfully!");
    } catch (error) {
      toast.error("Failed to send message. Please try again.");
      console.error("Failed to send email:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <motion.section
      id="contact"
      ref={ref}
      className="mt-20 sm:mt-28 mb-20 sm:mb-28 w-[min(100%,38rem)] text-center"
      initial={{ opacity: 0 }}
      whileInView={{ opacity: 1 }}
      transition={{ duration: 1 }}
      viewport={{ once: true }}
    >
      <motion.div
        initial={{ opacity: 0, y: 100 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-8"
      >
        <h2 className="text-3xl font-bold">Contact May-Clan</h2>
        <p className="text-gray-500 -mt-2 dark:text-gray-400 text-[0.9rem] font-medium">
          Your trusted shipping partner between Canada and Nigeria
        </p>
      </motion.div>

      <Formik
        initialValues={{ email: "", message: "" }}
        validationSchema={toFormikValidationSchema(validationSchema)}
        onSubmit={handleSubmit}
      >
        {({ isSubmitting }) => (
          <Form className="mt-6 flex flex-col bg-white bg-opacity-80 backdrop-blur-[0.5rem] shadow-lg shadow-black/[0.03] 
                         dark:bg-gray-950 dark:bg-opacity-75 p-6 rounded-2xl">
            <Field
              name="email"
              type="email"
              className="h-14 px-4 rounded-lg border border-black/10 dark:bg-gray-900 dark:bg-opacity-80 dark:focus:bg-opacity-100 transition-all 
                         focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2
                         placeholder-gray-500/70 dark:placeholder-gray-400/50 bg-white/50"
              placeholder="Your email"
            />
            <ErrorMessage name="email" component="div" className="text-red-500 text-sm mt-1" />
            
            <Field
              name="message"
              as="textarea"
              className="h-52 my-4 rounded-lg border border-black/10 p-4 dark:bg-gray-900 dark:bg-opacity-80 dark:focus:bg-opacity-100 transition-all 
                         focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2
                         placeholder-gray-500/70 dark:placeholder-gray-400/50 resize-none bg-white/50"
              placeholder="Your message"
            />
            <ErrorMessage name="message" component="div" className="text-red-500 text-sm -mt-2 mb-2" />
            
            <button
              type="submit"
              disabled={isSubmitting || isLoading}
              className="tracking-wider flex mx-auto rounded-md bg-sky-600 py-2 px-8 text-base font-medium text-white transition duration-300 ease-in-out hover:bg-sky-700 hover:shadow-signUp disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting || isLoading ? 'Sending...' : 'Send'}
            </button>
          </Form>
        )}
      </Formik>

      {/* Contact info footer */}
      <footer className="mt-8 sticky bottom-0 bg-white/90 dark:bg-gray-950/90 backdrop-blur-sm py-4 border-t border-gray-200 dark:border-gray-700 sm:static">
        <div className="container mx-auto px-4 text-center">
          <div className="font-medium text-lg">Canada Office: +1 (416) 555-0199</div>
          <div className="text-sm text-gray-600 dark:text-gray-400 mt-1">
            Nigeria Office: +234 (0) 812 345 6789
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-500 mt-2">
            <p>Email: contact@may-clan.com</p>
            <p>24/7 Customer Support Available</p>
          </div>
        </div>
      </footer>

      <ToastContainer
        position="top-center"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
      
    </motion.section>
  );
}
</file>

<file path="lib/types.ts">
// File: lib/types.ts
import { links } from "./data";

export type SectionName = (typeof links)[number]["name"];
</file>

<file path="app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
  /* Add smooth scroll behavior */
  scroll-behavior: smooth;
}

html {
     scroll-behavior: smooth; /* Or place it here */
}


@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-inter);
  --font-mono: var(--font-inter);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif; /* Current from your xml. Anika used Inter. */
}

/* Custom animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.animate-fadeIn {
  animation: fadeIn 1s ease-out;
}
</file>

<file path="lib/data.ts">
export const links = [
  {
    name: "Home",
    hash: "#home",
  },
  {
    name: "Services",
    hash: "#services",
  },
  
  {
    name: "Deals",
    hash: "#deals",
  },
  {
    name: "Contact",
    hash: "#contact",
  },
] as const; // "as const" is important for type inference
</file>

<file path="package.json">
{
  "name": "greymatterfs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "clsx": "^2.1.1",
    "formik": "^2.4.6",
    "framer-motion": "^12.12.1",
    "next": "15.2.4",
    "react": "^19.0.0",
    "react-confetti": "^6.4.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.5.0",
    "react-intersection-observer": "^9.16.0",
    "react-toastify": "^11.0.5",
    "zod": "^3.25.32",
    "zod-formik-adapter": "^1.3.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="app/layout.tsx">
// File: app/layout.tsx

import Script from 'next/script';
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import ActiveSectionContextProvider from "@/context/active-section-context";
import Header from "@/components/Header"; // Import the Header component

const inter = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "May-Clan | Canada-Nigeria Shipping & Logistics",
  description: "May-Clan offers comprehensive vehicle shipping, freight forwarding, and customs clearance services between Canada and Nigeria",
  keywords: ["Canada to Nigeria shipping", "vehicle shipping", "freight forwarding", "customs clearance", "logistics", "international shipping"],
  openGraph: {
    title: "May-Clan | Canada-Nigeria Shipping & Logistics",
    description: "Reliable vehicle shipping and freight forwarding services between Canada and Nigeria",
    images: [
      {
        url: '/og/may-clan-og-large.png',
        width: 1200,
        height: 630,
      }
    ]
  },
  twitter: {
    card: 'summary_large_image',
    title: "May-Clan | Canada-Nigeria Shipping & Logistics",
    description: "Reliable vehicle shipping and freight forwarding services between Canada and Nigeria",
    images: ['/og/may-clan-og-large.png'],
  }
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${inter.variable} antialiased`} 
      >
        <ActiveSectionContextProvider>
          <Header />
          {children}
        </ActiveSectionContextProvider>

        <Script
  strategy="afterInteractive"
  src="https://product-gallery.cloudinary.com/all.js"
  type="text/javascript"
/>
      </body>
    </html>
  );
}
</file>

<file path="app/page.tsx">
"use client"; 

import { useSectionInView } from "@/lib/hooks"; // Import the hook
import Contact from "@/components/Contact";
import Gallery from "@/components/Gallery";
import Image from 'next/image';


export default function Home() {
  // --- Data Flow: Connecting Sections to Context ---
  // For each section, `useSectionInView` is called:
  // a. It takes the `SectionName` (e.g., "Home", "Services") as an argument.
  // b. It returns a `ref` object.
  // c. This `ref` is attached to the corresponding `<section>` element.
  // d. When the section scrolls into view (based on the threshold in the hook),
  //    the hook's internal `useEffect` calls `setActiveSection` (from the context),
  //    updating the global state. This, in turn, causes the `Header` to re-render
  //    and highlight the correct link.

  const { ref: homeRef } = useSectionInView("Home", 0.5); // 0.5 threshold for home, adjust as needed
  const { ref: servicesRef } = useSectionInView("Services");
   const { ref: dealsRef } = useSectionInView("Deals"
   // Ensure names match lib/data.ts
 );

    // const { ref: contactRef } = useSectionInView("Contact"); // contactRef is handled inside Contact.tsx nowv

  return (
    <main className="flex flex-col items-center px-4">
      <section
        ref={homeRef}
        id="home"
        className="h-screen bg-gray-50 dark:bg-gray-900 w-full flex flex-col items-center justify-center px-4 scroll-mt-19"
      >
        <div className="text-center max-w-4xl">
          {/* May-Clan Logo */}
          <div className="mb-8 flex flex-col items-center">
            <Image 
              src="/images/logobig.png" 
              alt="May-Clan Logo"
              width={216}
              height={72}
              className="w-[162px] h-[54px] md:w-[216px] md:h-[72px] mb-6"
            />

            {/* Company Name and Tagline with fluid typography */}
            <div className="mb-8">
              <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold mb-3 text-gray-800 dark:text-gray-100">May-Clan</h1>
              <h2 className="text-xl md:text-2xl font-semibold mb-4 text-sky-700 dark:text-sky-400">Shipping & Logistics</h2>
              <p className="text-base md:text-lg font-medium text-gray-700 dark:text-gray-300">Your Trusted Partner for Canada-Nigeria Shipments.</p>
            </div>
          </div>

          {/* Introductory Content with fade-in */}
          <div className="space-y-6 animate-fadeIn">
            <h3 className="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-800 dark:text-gray-100">Seamless Shipping, Delivered.</h3>
            <p className="text-base md:text-lg leading-relaxed text-gray-600 dark:text-gray-400">
              May-Clan offers comprehensive and reliable vehicle and freight forwarding services from Canada to Nigeria. 
              We handle your shipments with care, ensuring timely and secure delivery.
            </p>
          </div>
        </div>
      </section>

      <section
        ref={servicesRef}
        id="services"
        className="min-h-screen bg-emerald-50 dark:bg-emerald-900/30 w-full flex flex-col items-center scroll-mt-19 py-16"
      >
        <div className="w-full max-w-6xl px-4">
          {/* Services Section */}
          <div className="mb-16">
            <div className="text-center mb-12">
              <h3 className="text-3xl md:text-4xl font-bold mb-6 text-gray-800 dark:text-gray-100">Our Core Shipping Services</h3>
              <p className="text-lg leading-relaxed text-gray-700 dark:text-gray-300 max-w-4xl mx-auto">
                At May-Clan, we provide a suite of specialized logistics solutions designed to make shipping between Canada and Nigeria
                effortless and efficient. Whether its your car, commercial goods, or personal items, weve got you covered.
              </p>
            </div>

            {/* Services Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Card 1: Vehicle Shipping */}
              <div className="bg-white dark:bg-gray-800 rounded-xl p-7 shadow-lg hover:shadow-xl transition-all">
                <h4 className="text-xl font-bold mb-4 text-sky-700 dark:text-sky-400">Vehicle Shipping (Canada to Nigeria)</h4>
                <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                  Specializing in RoRo (Roll-on/Roll-off) and containerized shipping for cars, trucks, and heavy machinery. We ensure safe transit and handle all export/import documentation.
                </p>
              </div>

              {/* Card 2: Freight Forwarding */}
              <div className="bg-white dark:bg-gray-800 rounded-xl p-7 shadow-lg hover:shadow-xl transition-all">
                <h4 className="text-xl font-bold mb-4 text-sky-700 dark:text-sky-400">Freight Forwarding</h4>
                <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                  Comprehensive air and sea freight solutions for commercial cargo and personal effects. We offer door-to-door, port-to-port services, tailored to your budget and timeline.
                </p>
              </div>

              {/* Card 3: Customs Clearance */}
              <div className="bg-white dark:bg-gray-800 rounded-xl p-7 shadow-lg hover:shadow-xl transition-all">
                <h4 className="text-xl font-bold mb-4 text-sky-700 dark:text-sky-400">Customs Clearance & Documentation</h4>
                <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                  Navigating customs can be complex. Our experts manage all customs brokerage and documentation requirements in Canada and Nigeria, ensuring a smooth clearance process.
                </p>
              </div>

              {/* Card 4: Logistics & Tracking */}
              <div className="bg-white dark:bg-gray-800 rounded-xl p-7 shadow-lg hover:shadow-xl transition-all">
                <h4 className="text-xl font-bold mb-4 text-sky-700 dark:text-sky-400">Warehousing & Real-Time Tracking</h4>
                <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
                  Secure warehousing options available in both Canada and Nigeria. Plus, stay updated with real-time tracking of your shipments from origin to final destination.
                </p>
              </div>
            </div>
          </div>
        </div>
      </section>


      <section
  ref={dealsRef}
  id="deals"
  className="min-h-screen bg-blue-50 dark:bg-blue-900/30 w-full flex flex-col items-center scroll-mt-19 py-16"
>
  <div className="w-full max-w-6xl px-4">
    <div className="text-center mb-12">
      <h3 className="text-3xl md:text-4xl font-bold mb-6 text-gray-800 dark:text-gray-100">Special Deals & Offers</h3>
      <p className="text-lg leading-relaxed text-gray-700 dark:text-gray-300 max-w-4xl mx-auto">
        Explore our latest shipping deals, discounts, and featured shipments!
      </p>
    </div>
    {/* Cloudinary Gallery */}
    <Gallery />
  </div>
</section>
      

{/*
        The Contact component itself is a <motion.section> with id="contact".
        It also internally calls useSectionInView("Contact").
        So, we don't need to wrap it in another <section> tag here,
        nor do we need to call useSectionInView for "Contact" here in page.tsx.
        The `scroll-mt` will be applied by the `id="contact"` on the <motion.section>
        within Contact.tsx, but we should ensure it has the correct scroll margin.
        Let's add it to the Contact.tsx itself if needed or rely on the section structure.

        For simplicity and consistency with other sections, let's wrap it,
        but the `id` and `ref` are effectively managed by the Contact component.
        Alternatively, let Contact component handle its own top-level <section> and scroll-margin.
        The Contact component is already a <motion.section>, so we'll use that.
      */}
      {/* No need for an outer section tag here, Contact.tsx provides its own */}
      <Contact />

    </main>
  );
}
</file>

</files>
